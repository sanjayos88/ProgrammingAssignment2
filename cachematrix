## makeCacheMatrix:creates a special "matrix" object that can cache its inverse.


makeCacheMatrix <- function(x = matrix()) {
  ## Initialize the inverse property
  m<-NULL
  
  ## Set the matrix
  set<-function(y){
    x<<-y
    m<<-NULL
  }
  ## Get the matrix
  get <- function() {
    ## Return the matrix
    x
  }
  ## Set the inverse of the matrix
  setInverse <- function(inverse) {
    i <<- inverse
  }
  ## Get the inverse of the matrix
  getInverse <- function() {
    ## Return the inverse property
    m
  }
  
  list(set = set, get = get,
       setInverse = setInverse,
       getInverse = getInverse)

}


## cacheSolve: computes the inverse of the special "matrix" returned by makeCacheMatrix above.If the inverse has already been calculated (and the matrix has not changed), then the cachesolve should retrieve the inverse from the cache.

cacheSolve <- function(x, ...) {
        ## Return a matrix, inverse of 'x'
        m <- x$getInverse()
        ## Return the inverse
        if( !is.null(m) ) {
          message("getting cached data")
          return(m)
        }
        data <- x$get()
        ## Calculate Inverse using matrix multiplication
        m <- solve(data) %*% data
        ## Inverse to the object
        x$setInverse(m)
        ## Return the matrix
        m      
}
